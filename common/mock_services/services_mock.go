// Code generated by MockGen. DO NOT EDIT.
// Source: weather/common/services (interfaces: WeatherServiceClient)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	services "weather/common/services"
)

// MockWeatherServiceClient is a mock of WeatherServiceClient interface
type MockWeatherServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceClientMockRecorder
}

// MockWeatherServiceClientMockRecorder is the mock recorder for MockWeatherServiceClient
type MockWeatherServiceClientMockRecorder struct {
	mock *MockWeatherServiceClient
}

// NewMockWeatherServiceClient creates a new mock instance
func NewMockWeatherServiceClient(ctrl *gomock.Controller) *MockWeatherServiceClient {
	mock := &MockWeatherServiceClient{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeatherServiceClient) EXPECT() *MockWeatherServiceClientMockRecorder {
	return m.recorder
}

// GetWeather mocks base method
func (m *MockWeatherServiceClient) GetWeather(arg0 context.Context, arg1 *services.LocationAndDate, arg2 ...grpc.CallOption) (*services.Weather, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeather", varargs...)
	ret0, _ := ret[0].(*services.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather
func (mr *MockWeatherServiceClientMockRecorder) GetWeather(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeatherServiceClient)(nil).GetWeather), varargs...)
}
